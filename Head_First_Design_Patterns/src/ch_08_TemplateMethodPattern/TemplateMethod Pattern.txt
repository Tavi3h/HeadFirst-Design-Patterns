该模式在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。
模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤。

这个模式是用来创建一个算法的模板。
模板就是一个方法。更具体地说，这个方法将算法定义成一组步骤，其中地任何步骤都可以是抽象的，并由子类负责实现。
这可以保证算法的结构保持不变，同时由子类提供部分实现。

Q : 当我创建一个模板方法时，怎样才能知道什么时候该使用抽象方法，什么时候使用钩子呢？
A : 当你的子类“必须提供算法中某个方法或步骤的实现时”，就使用抽象方法。如果算法的这个部分时可选的，就使用
	钩子。如果是钩子的话，子类可以选择实现这个钩子，但并不强制这么做。

Q : 使用钩子的目的？
A : 钩子可以让子类实现算法中的可选部分，或者在钩子对于子类的实现并不重要时，子类可以选择对其置之不理。
	钩子的另一个用法是让子类能够有机会对模板方法中某些即将发生的（或刚刚发生的）步骤做出反应。
	钩子也可以让子类由能力为其抽象类作一些决定。

优点:

（1）、算法只存在于一个地方，也就是在父类中，容易修改。需要修改算法时，只要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改。

（2）、实现了最大化代码复用。父类的模板方法和已实现的某些步骤会被子类继承而直接使用。

（3）、既统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现。

（4）、提供了一个基本框架，容易扩展子类。模板方法有框架控制如何做事情，而由使用框架的人指定框架算法中每个步骤的细节。子类只要继承父类，实现抽象方法，就可以使用父类的算法。

缺点:

（1）、模板方法使用继承方式复用代码，如果要在基本算法里面增加一个步骤，而该步骤是抽象的话，每个子类都要修改代码，实现这个步骤。

要点：
1、“模板方法”定义了算法的步骤，把这些步骤实现延迟到子类。
2、模板方法模式为我们提供了一种代码复用的重要技巧。
3、模板方法的抽象类可以定义具体方法、抽象方法、钩子。
4、抽象方法由子类实现
5、钩子是一种方法，他在抽象类中不做事，子类可以选择是否覆盖它。
6、为了防止子类改变模板方法中的算法，可以将模板方法声明为final
7、好莱坞原则告诉我们，将决策权放在高层模块中，以便决定如何以及何时调用低层模块。
8、策略模式和模板方法模式都封装算法，一个使用组合，一个用继承。
9、工厂方法是模板方法的一个特殊版本。
10、java类库中有大量的代码使用了模板方法模式的变体。