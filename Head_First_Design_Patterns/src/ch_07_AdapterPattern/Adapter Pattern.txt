该模式将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。

包装某些对象，让它们的接口看起来不像自己而像是别的东西。
这样就可以在设计中，将类的接口转换成想要的接口，以便实现不同的接口，使不兼容的接口变成兼容。

适配器模式中各部分之间的关系：P241

UML-P245

1、客户：客户是依据目标接口实现的。发出请求。
2、适配器：适配器实现了目标接口，并持有被适配者的引用。接收客户的请求，并将请求转译给被适配者。
3、被适配者：与客户是解耦的，二者均不清楚对方的存在。接收来自适配器的请求，并做出响应。


适配器模式充满着良好的OO设计原则：使用对象组合，以修改的接口包装被适配者。这种做法还有额外的优点，那就是，被适配者的任何子类都可以搭配适配器使用

实现一个适配器所需要进行的工作与目标接口的大小成正比。但是如果不适用适配器，则将面对必须修改客户端代码来调用新的接口的问题。

当一个适配器包装了多个被适配者，这涉及另一个模式，外观模式。

要点：
1、当需要使用一个现有的类而其接口并不符合你的需要时，就使用适配器。
2、适配器改变接口以符合客户的期望。
3、实现一个适配器可能需要一番功夫，也可能不费功夫，视目标接口的大小与复杂度而定。
4、适配器有两种形式：对象适配器和类适配器。类适配器需要用到多重继承(*java不允许多重继承)。
