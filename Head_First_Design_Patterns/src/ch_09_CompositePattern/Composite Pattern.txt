组合模式允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。

使用组合结构，我们能把相同的操作应用在组合和个别对象上。在大多数情况下，我们可以忽略对象组合和个别对象之间的差别。

UML-358

node: 带子元素的元素称为节点
leaf: 没有子元素的元素称为叶节点

包含其它组件的组件为组合对象，不包含其它组件的组件为叶节点对象。
(组件可以有一个指向其父节点的指针)

<折衷设计>
组合模式不但要管理层次结构，而且还要执行菜单的操作。违背单一责任设计原则。
这是因为组合模式以单一责任设计原则换取透明性。
透明性：通过让组件的接口同时包含一些管理子节点和叶节点的操作，客户就可以将组合和叶节点一视同仁。
也就是说，一个元素究竟是组合还是叶节点，对客户是透明的。

现在在MenuComponent类中同时具有两种类型的操作。因为客户有机会对一个元素做一些不恰当的或是没意义的操作，
例如视图把菜单（Menu）添加到菜单项（MenuItem），所以我们失去了一些安全性。
这是设计上的选择，我们当然可以选择另一种方向的设计，将责任区分开来放在不同的接口中。
这样设计上就比较安全，但我们同时失去了透明性，客户的代码将必须用条件语句和instanceof操作符处理不同类型的节点。

要点：
1、组合模式提供一个结构，可同时包含个别对象和组合对象。
2、组合模式允许客户对个别对象以及组合对象一视同仁。
3、组合结构内的任意对象称为组件，组件可以是组合对象，也可以是叶节点对象。
4、再实现组合模式时，有许多设计上的折衷。要根据需要平衡透明性和安全性。