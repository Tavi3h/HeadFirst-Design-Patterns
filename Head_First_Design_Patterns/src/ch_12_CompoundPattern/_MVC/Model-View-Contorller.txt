模型-视图-控制器：

M：模型持有所有的数据、状态和逻辑程序。模型没有注意到视图和控制器，虽然它提供了操纵和检索状态的接口，并发送状态改变通知观察者。
V：用来呈现模型。视图通常直接从模型中取得它需要显示的状态与数据。
C：取得用户的输入，并解读其对模型的意思。

DJview例子中：

1）	视图和控制器实现了经典的策略模式：视图是一个对象，可以被调整使用不同的策略，而控制器提供了策略。
	视图只关心系统中可视的部分，对于任何界面行为，都委托给控制器处理。使用策略模式也可以让视图和模型之间
	的关系解耦，因为控制器负责和模型交互来传递用户的请求。对于工作是怎么进行的，视图毫不知情。
2）	对于视图而言，显示包含了窗口、面板、按钮、文本标签等。每个显示组件如果不是组合节点（窗口）就是叶节点（按钮），
	当控制器告诉视图耿欣时，只需告诉视图最顶层的组件即可，组合会处理其余的事情。
3）	模型实现了观察者模式，当状态改变时，相关对象将持续更新。使用观察者模式可以让模型完全独立于视图和控制器。
	同一个模型可以使用不同的视图，甚至可以同时使用多个视图。

MVC与Web：
Web开发人员也都在适配MVC，使它符合B/S模型。使用Servlet和JSP技术来达到MVC的分离效果。

1）发出一个会被Servlet收到的HTTP请求，这些请求通常含有表单等。Servlet接受数据，并解析数据
2）Servlet扮演控制器。处理请求，通常会向模型（一般为数据库）发出请求。处理结果往往以JavaBean的形式打包
3）视图就是JSP，JSP唯一的工作就是产生页面，表现模型的视图（模型通过JavaBean获得）以及进一步动作所需要的所有控件。
4）视图通过HTTP将页面返回浏览器，页面返回浏览器，作为视图显示出来。
	