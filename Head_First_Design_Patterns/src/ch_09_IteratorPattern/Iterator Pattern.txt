迭代器模式提供了一种方法顺序的访问一个聚合对象中的各个元素，而又不暴露其内部的表示。

在设计中使用迭代器的影响是明显的：如果你有一个统一的方法访问聚合中的每一个对象，你就可以编写多态的代码和这些聚合搭配。
另一个重要的影响是迭代器模式把在元素之间游走的责任交给迭代器，而不是聚合对象。这不仅让聚合的接口和实现变得更简洁，
也可以让聚合更专注在它所应该专注的事情上面----管理对象集合，而不必理会遍历的事情。

UML-P337

Collection和Iterator的好处在于，每个Collection都知道如何创建自己的Iterator。只要调用ArrayList上的iterator(),
就可以返回一个具体的Iterator实现，而你根本不需要知道或关心到底使用了哪个具体的类。

Java 5包含一种新形式的for语句，称为for/in。这可以让你在一个集合或者一个数组中遍历，而且不需要创建迭代器。

for (iterable_type iterable_element : iterable) {
			
}

要点：
1、迭代器允许访问聚合的元素，而不需要暴露它的内部结构
2、迭代器将遍历聚合的工作封装进一个对象中。
3、当使用迭代器时，我们依赖聚合提供遍历。
4、迭代器提供了一个通用的接口，让我们遍历聚合的项，当我们编码使用聚合的项时，就可以使用多态机制。
5、我们应该努力让一个类只分配一个责任。